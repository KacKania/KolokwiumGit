#ifdef Zadanie2
int wyszukajPierwsza(double* tablica, int rozmiar, double wartSzukana)
{
	// Sparwdzenie poprawności danych wejściowych:
	if (tablica == nullptr) throw std::invalid_argument("tablica = nullptr");
	if (rozmiar < 1) throw std::length_error("rozmiar < 1");

	for (int index = 0; index < rozmiar; index++)
	{
		if (tablica[index] == wartSzukana)
			return index;  // Znaleziono pierwsze wystąpienie - przerywam
	}
	throw std::domain_error("Wratosc nie wystąpila");
}

int ileRazyZnak(const char* text, char znak)
{
	int liczbaWystapien = 0;
do{
	if (*text == znak) liczbaWystapien++;
} while (*text++);
		
		return liczbaWystapien;
}



void test_wP_jedenraz()
{
	cerr << "Test czy funkcja Znajduje pozycje wartosci, ktora wystepuje tylko raz:\t\t\t\t\t\t";
	double T[3] = { 1.0,2.0,3.0 };
	int poprawnie = 1;
	if (wyszukajPierwsza(T, 3, 2.0) == poprawnie)cerr << "OK\n";
	else cerr << "FAIL\n";
}


void test_wP_kilkarazy()
{
	cerr << "Test czy funkcja Zwraca pozycje pierwszego wystapienia wartosci, ktora w tablicy wystepuje wiecej niz raz:\t";
	double T[6] = { 1.0,2.0,3.0,2.0, 4.0, 2.0 };
	int poprawnie = 1;
	if (wyszukajPierwsza(T, 6, 2.0) == poprawnie)cerr << "OK\n";
	else cerr << "FAIL\n";
}


void test_wP_nullptr()
{
	cerr << "Test czy funkcja Sygnalizuje blad adresu tablicy (nullptr):\t\t\t\t\t\t\t";
	double T[3] = { 3.0,2.0,1.0 };
	try
	{
		bool wynik = wyszukajPierwsza(nullptr, 3, 2.0);
	}
	catch (std::invalid_argument)
	{
		cerr << "OK\n";
		return;
	}
	catch (...) {}
	cerr << "FAIL\n";
}


void test_wP_rozmiar()
{
	cerr << "Test czy funkcja Sygnalizuje blad zerowego lub ujemnego rozmiaru:\t\t\t\t\t\t";
	double T[] = { 2.0,0.1,3.5 };
	try
	{
		bool wynik = wyszukajPierwsza(T, -1, 2.0);
	}
	catch (std::length_error)
	{
		cerr << "OK\n";
		return;
	}
	catch (...) {}
	cerr << "FAIL\n";
}


void test_wP_brakodp()
{
	cerr << "Test czy funkcja Sygnalizuje nieznalezienie wartosci, której nie ma w tablicy:\t\t\t\t\t";
	double T[3] = { 2.0,0.1,3.5 };
	try
	{
		bool wynik = wyszukajPierwsza(T, 3, 1.0);
	}
	catch (std::domain_error)
	{
		cerr << "OK\n";
		return;
	}
	catch (...) {}
	cerr << "FAIL\n";
}


void test_iRZ_srodek()
{
	cerr << "Test czy funkcja Liczy wskazane znaki w srodku tekstu:\t\t\t\t\t\t\t\t";
	char tekst[] = { "Ala mma kota" };
	int poprawnie = 2;
	char znak = 'm';
	if (ileRazyZnak(tekst, znak) == poprawnie)cerr << "OK\n";
	else cerr << "FAIL\n";
}


void test_iRZ_poczatek()
{
	cerr << "Test czy funkcja Zalicza znak na poczatku tekstu:\t\t\t\t\t\t\t\t";
	char tekst[] = { "Ala ma kota" };
	int poprawnie = 1;
	char znak = 'A';
	if (ileRazyZnak(tekst, znak) == poprawnie)cerr << "OK\n";
	else cerr << "FAIL\n";
}


void test_iRZ_brak()
{
	cerr << "Test czy funkcja Zwraca zero gdy podanego znaku nie ma w tekscie:\t\t\t\t\t\t";
	char tekst[] = { "Ala ma kota" };
	int poprawnie = 0;
	char znak = 'q';
	if (ileRazyZnak(tekst, znak) == poprawnie)cerr << "OK\n";
	else cerr << "FAIL\n";
}


int main()
{
	
		srand(time(0));
		int nr_testu[] = { 1,2,3,4,5,6,7,8 };
		int NUM_TEST = 8;
		int roz = NUM_TEST;
		for (int nrTestu = 0; nrTestu < NUM_TEST - 1; nrTestu++);
		{
			int idx = rand() % roz--;
			swap(nr_testu[idx], nr_testu[roz]);
		}
		int nrTestu;
		for (int nrTestu : nr_testu)
		{
			switch (nrTestu)
			{
			case 1:
				test_wP_jedenraz();
				break;
			case 2:
				test_wP_kilkarazy();
				break;
			case 3:
				test_wP_nullptr();
				break;
			case 4:
				test_wP_rozmiar();
				break;
			case 5:
				test_wP_brakodp();
				break;
			case 6:
				test_iRZ_srodek();
				break;
			case 7:
				test_iRZ_poczatek();
				break;
			case 8:
				test_iRZ_brak();
				break;
			}
		}
	}
#endif


#ifdef Zadanie3
double dlOdcinka(double x1, double y1, double x2, double y2)
{
	return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}

double sumaKatow(double* obX, double* obY, int liczPkt, double x, double y)
{
	double a, b, c, kat, suma = 0;
	for (int i = 0; i < liczPkt; i++)
	{
		int j = (i + 1) % liczPkt;
		c = dlOdcinka(obX[i], obY[i], obX[j], obY[j]);
		a = dlOdcinka(x, y, obX[i], obY[i]);
		b = dlOdcinka(x, y, obX[j], obY[j]);
		kat = acos(0.5 * (a / b + b / a - c * c / (a * b)));
		suma += kat;
	}
	return suma;
}

bool czyPunktNalezyDoObszaru(double* obX, double* obY, int liczPkt, double x, double y)
{
	if (obX == nullptr || obY == nullptr) throw std::invalid_argument("Nullptr!");
	if (liczPkt <= 2) throw std::domain_error("LiczPkt<=2");
	const double DWA_PI = 2.0 * 3.1415926;
	const double EPS = 0.00001;
	double modRoznicy = abs(sumaKatow(obX, obY, liczPkt, x, y) - DWA_PI);
	return (-EPS < modRoznicy&& modRoznicy < EPS);
}

void test_test_PNDO_wewnatrz()
{
	cerr << "Test czy funkcja Klasyfikuje poprawnie punkt polozony wewnatrz wielokata :\t\t\t";
	double tabX[] = { 0.0, 0.0, 1.0, 1.0 };
	double tabY[] = { 0.0, 1.0, 1.0, 0.0 };
	double xP = 0.5;
	double yP = 0.5;
	int SIZE = 4;
	bool poprawnie = 1;
	if (czyPunktNalezyDoObszaru(tabX, tabY, SIZE, xP, yP) == poprawnie) cerr << "OK\n";
	else cerr << "FAIL\n";
}
void test_PNDO_zewnatrz()
{
	cerr << "Test czy funkcja Klasyfikuje poprawnie punkt polozony na zewnatrz wielokata:\t\t\t";
	double tabX[] = { 0.0, 0.0, 1.0, 1.0 };
	double tabY[] = { 0.0, 1.0, 1.0, 0.0 };
	double xP = 1.0;
	double yP = 0.5;
	int SIZE = 4;
	bool poprawnie = 0;
	if (czyPunktNalezyDoObszaru(tabX, tabY, SIZE, xP, yP) == poprawnie) cerr << "OK\n";
	else cerr << "FAIL\n";
}
void test_PNDO_nullptr()
{
	cerr << "Test czy funkcja Poprawnie zwroci wyjatek ze wzgledu na wystapienie nullptr:\t\t\t";
	double tabX[] = { 0.0,-1.0, 1.0, 3.0 };
	double tabY[] = { 0.0, 1.0, 2.0, 1.0 };
	double xP = -0.5;
	double yP = 0.5;
	int SIZE = 4;
	try
	{
		double wynik = czyPunktNalezyDoObszaru(nullptr, tabY, SIZE, xP, yP);
	}
	catch (std::invalid_argument)
	{
		cerr << "OK\n";
		return;
	}
	catch (...) {}
	cerr << "FAIL\n";
}
void test_PNDOwyjatek_liczPkt()
{
	cerr << "Test czy funkcja Poprawnie zwroci wyjatek ze wzgledu na liczbe wierzcholkow:\t\t\t";
	double tabX[] = { 0.0,-1.0, 1.0, 3.0 };
	double tabY[] = { 0.0, 1.0, 2.0, 1.0 };
	double xP = 0.5;
	double yP = 0.5;
	int SIZE = 4;

	try
	{
		double wynik = czyPunktNalezyDoObszaru(tabX, tabY, SIZE, xP, yP);
	}
	catch (std::domain_error)
	{
		cerr << "OK\n";
		return;
	}
	catch (...) {}
	cerr << "FAIL\n";
}


void main(void)
{
	double tabX[] = { 0.0,-1.0, 1.0, 3.0 };
	double tabY[] = { 0.0, 1.0, 2.0, 1.0 };
	double xP = -0.5;
	double yP = 0.5;
	const int SIZE = sizeof(tabX) / sizeof(double);
	cout << czyPunktNalezyDoObszaru(tabX, tabY, SIZE, xP, yP) << endl;

	test_test_PNDO_wewnatrz();
	test_PNDO_zewnatrz();
	test_PNDO_nullptr();
	test_PNDOwyjatek_liczPkt();
}
#endif