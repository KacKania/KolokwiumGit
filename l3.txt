@@ -1,327 +0,0 @@
﻿#include <iostream>

#define ZadanieW

/* Zmieniając ostatnią literę w poniższej instrukcji na D (dodatkowe), lub P (podstawowe)
*  wybierasz aktywne zadanie.
*
*  UWAGA: jeśli rozwiązanie zadań wymaga podziału programu na pliki to dodaj je wszystkie do
*  projektu, ale przy każdym zadaniu "includuj" tylko te, które jego dotyczą.
*  Poniższe bloki dotyczą zadań z zajeć.
*/
 

#ifdef ZadanieD

#include <iostream>
#include <cstdlib>
#include <cstring>

using namespace std;

int** Tablica2dAlokacja(int wiersze, int kolumny)
{

    int** tablica = nullptr; // pusty wskaz nie wskaz na zaden elem
    int size = wiersze * kolumny * sizeof(int);
    int zaalokowaneWierszeLicznik = 0; 
    bool True = false;


    //1MB (2^20b)
    if (size < (1 << 20)) 
    {
        tablica = new (nothrow) int* [wiersze];  //używając new z(std::nothrow), możemy wyłączyć zgłaszanie problemu przez system obsługi wyjątków(12),

        if (tablica)
        {
            tablica[0] = new (nothrow) int[wiersze * kolumny]; //alokacja+ przypisz do tablicy
            //sprawdz alok, przypis wskaz 
            if (tablica[0])
            {
                for (int i = 1; i < wiersze; i++)
                {
                    tablica[i] = tablica[0] + i * kolumny;
                }
                zaalokowaneWierszeLicznik = wiersze; // licznik na wiersze
                True = true;
            }
            else
            {
                delete[] tablica;
                tablica = nullptr;
            }
        }
    }

    //wiekszy 1MB
    else
    {
        tablica = new (nothrow) int* [wiersze];

        if (tablica)
        {
            int i = 0;
            for (i=0; i < wiersze; i++) {
                tablica[i] = new (nothrow) int[kolumny];

                if (!tablica[i]) 
                {
                    break;
                }
                zaalokowaneWierszeLicznik++; 
            }
            if (i == wiersze)
            {
                True = true;
            }
            else
            { //czysc
                for (int j = 0; j < i; j++) 
                {
                    delete[] tablica[j];
                }
                delete[] tablica;
                tablica = nullptr;
            }
        }
    }


    if (True)
    {
        cerr << "pomyslna alokacja " << wiersze << "x" << kolumny << " 2wymiarowej tablicy (" << size << " bajtow) uzyto ";
        
        if (size < (1 << 20))
        {
            cerr << "kontynuacja" << endl;
        }
        else 
        {
            cerr << "fragmentacja" << endl;
        }
    }

    else 
    {
        cerr << "niepomyslna alokacja " << wiersze << "x" << kolumny << " 2wymiarowej tablicy (" << size << " bajtow)." << endl;
        if (tablica)
        {
            // zwalnianie tylko zaalokowanych wierszy
            for (int i = 0; i < zaalokowaneWierszeLicznik; i++)
            {
                delete[] tablica[i];
            }
            delete[] tablica[0];
            delete[] tablica;
            tablica = nullptr;
        }
    }

    return tablica;
}



int main()
{
    int wiersze = 5500;
    int kolumny = 5500;
    int** tablica = Tablica2dAlokacja(wiersze, kolumny);

    if (tablica) 
    {                   // inicjalizacja 
        
        for (int i = 0; i < wiersze; i++) {
            memset(tablica[i], 0, kolumny * sizeof(int)); // wartosc pamieci wskaz, wart,bajty
        }

        
        tablica[0][1] = 1;
        tablica[wiersze - 1][kolumny - 1] = 2;

                                                // zwolnienie pam
        for (int i = 0; i < wiersze; i++) {
            delete[] tablica[i];
        }
        delete[] tablica;
        tablica = nullptr;
    }

    return 0;
}

#endif

#ifdef ZadanieW

#include <iostream>
#include <cstdlib>
#include <cstring>

using namespace std;

int* tablica1dAlokacja(int rozmiar)
{
    if (rozmiar < 0)
    {
        return nullptr;
    }
    else
    {
        int* tablica = new int[rozmiar + 1]();
        tablica[0] = rozmiar;
        return (tablica + 1);
    }
}



void zwolnianieTab(int* tablica)
{
    if (tablica != nullptr)
    {
        delete[](tablica - 1);
    }
}




int* zmienRozmiar(int* tablica, int nowyRozmiar)
{
    if (tablica == nullptr)
    {
        return tablica1dAlokacja(nowyRozmiar);
    }
    if (nowyRozmiar < 0)
    {
        zwolnianieTab(tablica);
        return nullptr;
    }
    else
    {
        int staryRozmiar = tablica[-1];


        if (staryRozmiar == nowyRozmiar)
        {
            return tablica;
        } // () wskaznik lub 0

        int* temp = new int[nowyRozmiar + 1]();
        temp[0] = nowyRozmiar;
        int kopiaRozmiar = staryRozmiar < nowyRozmiar ? staryRozmiar : nowyRozmiar; //na ? i :  


        memcpy(temp + 1, tablica, kopiaRozmiar * sizeof(int));
        zwolnianieTab(tablica);
        return (temp + 1);
    }
}

void wypiszTabs(int* tablica)
{
    if (tablica == nullptr)
    {
        cout << "null" << endl;
        return;
    }
    int rozmiar = tablica[-1];
    for (int i = 0; i < rozmiar; i++)
    {
        cout << tablica[i] << " ";
    }
    cout << endl;
}




int main()
{
    int rozmiar;
    cout << "Wpisz rozmiar tablicy: ";
    cin >> rozmiar;

    int* tablica = tablica1dAlokacja(rozmiar);
    for (int i = 0; i < rozmiar; i++)
    {
        tablica[i] = i;
    }
    wypiszTabs(tablica);

    int nowyRozmiar;
    cout << "Wpisz nowyRozmiar: ";
    cin >> nowyRozmiar;
    tablica = zmienRozmiar(tablica, nowyRozmiar);
    wypiszTabs(tablica);

    zwolnianieTab(tablica);


    return 0;
}




#endif

#ifdef ZadanieP

#include <iostream>
#include <cstdlib>
#include <cstring>

using namespace std;



in main()
{



    return 0;
}
#endif

#ifdef ZadanieA

// TU UMIEŚĆ KOD ROZWIAZANIA ZADANIA AMBITNEGO

#endif

/* 
	Poniższe bloki warunkowe dotyczą zadań kolokwialnych.
	Oddając zadania z zajęć, skasuj poniższe bloki.
	Oddając zadania z kolokwium skasuj powyższe bloki.
*/


#ifdef Blok1

// TU UMIEŚĆ KOD ROZWIAZANIA ZADANIA Z BLOKU 1

#endif

#ifdef Blok2

// TU UMIEŚĆ KOD ROZWIAZANIA ZADANIA Z BLOKU 2

#endif

#ifdef Blok3

// TU UMIEŚĆ KOD ROZWIAZANIA ZADANIA Z BLOKU 3

#endif

#ifdef Blok4

// TU UMIEŚĆ KOD ROZWIAZANIA ZADANIA Z BLOKU 4

#endif

